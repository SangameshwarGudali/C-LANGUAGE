1) Declare a function accepting 
    i) int 
    ii) pointer to a function 
            a) accepting int 
            b) returning void 
    returns 
    i) pointer to a function 
        a) accepting int 
        b) returning void 

Choose Name: cpa_func 
void  (*cpa_func(int, void(*pfn)(int)))(int); 

UNIX OS : Signal
void(* signal( int signum, void(*pfn_sighand)(int) )(int);

   void(*   signal(int, 
                    void(*)(int) 
                    ) 
        ) (int); 

void (*signal(int, void (*)(int)))(int); 

2) Declare a pointer to array 5 of integers: 

    int *p[5]; // wrong: p is array 5 of pointers to int 
    int (*p)[5]; // CORRECT

3)  Declare a pointer to array 4 of pointers to functions 
    accepting 
    (i) int, 
    (ii) int 
    returning 
    (i) pointer  to array 5 of ints 

Start : Decide a variable name. Say p. 
Decide primary category: Built in data type / structure / array / function / pointer 

p is a pointer to:         
*p

p is a pointer to array 4 of: 
(*p)[4]

p is a pointer to array 4 of pointer to 
*(*p)[4]

p is a pointer to array 4 of pointer to function accepting two ints and returning pointer to
*(*(*p)[4])(int, int)

p is a pointer to array 4 of pointer to function accepting two ints and returning pointer 
to array 5 of 

    (*(*(*p)[4])(int, int))[5]

p is a pointer to array 4 of pointer to function accepting two ints and returning pointer 
to array 5 of int 
int (*(*(*p)[4])(int, int))[5]; 

4) Declare a pointer to function accepting 
    (i) integer 
    returning 
    (i) pointer to array 4 of pointer to function 
        (i)accepting float, 
        (ii) accepting float 
        returning 
        (i) pointer to array 3 of pointer to function 
            (i) accepting int 
            returning 
            (i) int

1)Declare a pointer to:   *p
2)Declare a pointer to function:      (*p)()
3)Declare a pointer to function accepting (i) integer:    (*p)(int)

4)Declare a pointer to function accepting (i) integer, 
    returning pointer to      *(*p)(int)
5)Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of :  (*(*p)(int))[4]
6)Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to :
    *(*(*p)(int))[4]
7)Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to function 
    (*(*(*p)(int))[4])()
8) Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to function 
    accepting two floats and returning pointer to 
     *(*(*(*p)(int))[4])(float, float)

9)  Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to function 
    accepting two floats and returning pointer to 
    array 3 of 

    (*(*(*(*p)(int))[4])(float, float))[3]

10)  Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to function 
    accepting two floats and returning pointer to 
    array 3 of pointer to function 
    (*(*(*(*(*p)(int))[4])(float, float))[3])

11)  Declare a pointer to function accepting (i) integer, 
    returning pointer to array 4 of pointer to function 
    accepting two floats and returning pointer to 
    array 3 of pointer to function accepting int, returning int 
      int (*(*(*(*(*p)(int))[4])(float, float))[3])(int); 

/* TRICKS OF THE TRADE 
v is a built in data type   T v; // done 
v is a structure: struct T v; // done 

v is array N of:    v[N]
Remaning: array element type 

v is a function:    v()
Remaining: types of formal parameters and return value 

v is a pointer:     *v
Remaining: Type of pointee 

v is a pointer to array N of:   (*v)[N]
Remaning: array element type 

v is a pointer to function:         (*v)()
Remaning: Formal parameters type and return type 

v is a pointer to pointer to:   **v
Remaning : pointee of a pointer of which v is a pointer. 
*/ 

4) Declare a pointer to function accepting 
    (i) integer 
    returning 
    (i) pointer to array 4 of pointer to function 
        (i)accepting float, 
        (ii) accepting float 
        returning 
        (i) pointer to array 3 of pointer to function 
            (i) accepting int 
            returning 
            (i) int

            

(*v)[4] 
(*(*p)(int))[4]

(*v)()
(*(*(*p)(int))[4])(float, float)

(*v)[3]
(*(*(*(*p)(int))[4])(float, float))[3]

(*v)()
(*(*(*(*(*p)(int))[4])(float, float))[3])()

int (*(*(*(*(*p)(int))[4])(float, float))[3])(int); 
#----------------------------------------------------------------

p is a pointer to array 3 of pointer to array 4 of pointer to function 
accepting 
    (i) pointer to array 3 of int 
returning 
    pointer to function 
        (i) accepting int 
        returning 
        (i) pointer to array 4 of pointer to function 
            accepting 
            (i) int 
            returning 
            (i) pointer to array 3 of int 


(*p)[3]

(*v)[4]

(*(*p)[3])[4]

(*v)()
(*(*(*p)[3])[4])()

(*(*(*p)[3])[4])(int(*)[3])

(*v)()
(*(*(*(*p)[3])[4])(int(*)[3]))()

(*(*(*(*p)[3])[4])(int(*)[3]))(int)

(*v)[4]
(*(*(*(*(*p)[3])[4])(int(*)[3]))(int))[4]

(*v)()
(*(*(*(*(*(*p)[3])[4])(int(*)[3]))(int))[4])()

(*(*(*(*(*(*p)[3])[4])(int(*)[3]))(int))[4])(int)

(*v)[3]
(*(*(*(*(*(*(*p)[3])[4])(int(*)[3]))(int))[4])(int))[3]

int (*(*(*(*(*(*(*p)[3])[4])(int(*)[3]))(int))[4])(int))[3]; 
